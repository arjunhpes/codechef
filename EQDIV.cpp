//
//  MIT License
//
//  Copyright (c) [2020] [Ritesh Singla]
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to
//  deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
//  sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//  IN THE SOFTWARE.
//

#include <algorithm>
//#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <set>
#include <map>
using namespace std;

enum SolveType { BRUTE, MAIN };

/*
////////////////////////////////////////////////////////////////////////////////
//
// TEMPLATE START
//
// Template used by Ritesh Singla (alias=uhateme) for competitive programming.
//
////////////////////////////////////////////////////////////////////////////////
*/

#ifdef UHATEME  // Defined in Xcode Artichtecture for local development.
enum InputType { STDOUT, STDOUT_DBG, FILE_IO, FILE_INPUT, GENERATED_INPUT };
#define CURRENT_INPUT_TYPE FILE_INPUT
#include "uhateme.h"

int TEST_CASE = -1;
#else
#define Trace(...)
#endif

namespace {

// Constants
#define endl '\n'

// Loops
#define rep(i, j, n) for (int i = (int)(j); i < (int)(n); i++)
#define repv(i, j, n) for (int i = (int)(n)-1; i >= (int)(j); i--)
#define set2(ar, i, j, v)          \
  rep(a, 0, i) {                   \
    rep(b, 0, j) { ar[a][b] = v; } \
  }
#define set1(ar, i, v) \
  rep(a, 0, i) { ar[a] = v; }

// Data Types
#define int64 long long int
#define ll long long int
#define vi vector<int>

// Short aliases
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(), (x).end()

// Speeds up cin/cout. Do not use in cin/cout and scanf/printf
// when using UseFastIO
inline void UseFastIO(bool use_fast_io) {
  if (use_fast_io) {
    cin.tie(0);
    cout.tie(0);
    cin.sync_with_stdio(0);
    cout.sync_with_stdio(0);
  }
}

}  // namespace

void GenerateInput() {}

// Use global vector to pass on the answers if needed.
vector<int> brute_ans;
void SolveBruteTestCase() {
  // Pushback answer using index |TEST_CASE|. This can be accessed via
  // |SolveTestCase|
}

/*
////////////////////////////////////////////////////////////////////////////////
//
// TEMPLATE END
//
// Template used by Ritesh Singla (alias=uhateme) for competitive programming.
//
////////////////////////////////////////////////////////////////////////////////
*/
int k;

vector<int> ar[5][80];
vector<int> cycle_length = {0, 4, 8, 16, 32};
vector<int> max_ar_length = {0, 29, 46, 44, 61};

vector<string> cycles = {"", "1001", "10010110", "1001011001101001",
                         "10010110011010010110100110010110"};

int64 GetHeap(int k, int n) {
  int64 ans = n;
  rep(i, 0, k - 1) { ans *= n; }
  return ans;
}

void PrintHardcoded(int k, int n) {
  int64 sum = 0;
  int64 my_share = 0;
  for (auto v : ar[k][n]) {
    my_share += GetHeap(k, v);
  }
  for (int i = 1; i <= n; i++) {
    sum += GetHeap(k, i);
  }
  cout << sum - 2 * my_share << endl;
  int j = (int)ar[k][n].size() - 1;
  for (int i = 1; i <= n; i++) {
    if (j >= 0 && i == ar[k][n][j]) {
      cout << 1;
      j--;
    } else {
      cout << 0;
    }
  }
}

void PrintExtras(int k, int e) {
  rep(i, 0, e) { cout << cycles[k]; }
}

void SolveTestCase() {
  int n;
  cin >> n;

  if (n <= max_ar_length[k]) {
    PrintHardcoded(k, n);
  } else {
    int extra = 0;
    while (n > max_ar_length[k]) {
      n -= cycle_length[k];
      extra++;
    }
    PrintHardcoded(k, n);
    PrintExtras(k, extra);
  }
  cout << endl;
}

void Solve(SolveType solve_type) {
  ar[4][1] = {};                                                         // 1
  ar[4][2] = {1};                                                        // 15
  ar[4][3] = {2, 1};                                                     // 64
  ar[4][4] = {3, 2, 1};                                                  // 158
  ar[4][5] = {4, 3, 2, 1};                                               // 271
  ar[4][6] = {5, 4, 3, 2, 1};                                            // 317
  ar[4][7] = {6, 5, 4, 3, 2, 1};                                         // 126
  ar[4][8] = {8, 4, 2, 1};                                               // 34
  ar[4][9] = {9, 5, 4, 3, 2, 1};                                         // 253
  ar[4][10] = {9, 8, 6, 5, 3, 1};                                        // 13
  ar[4][11] = {10, 9, 7, 5, 4, 3, 2, 1};                                 // 92
  ar[4][12] = {12, 9, 7, 5, 2, 1};                                       // 30
  ar[4][13] = {12, 11, 9, 7, 4, 2, 1};                                   // 47
  ar[4][14] = {14, 12, 7, 6, 5, 4, 3, 2, 1};                             // 31
  ar[4][15] = {15, 12, 10, 8, 7, 6, 1};                                  // 2
  ar[4][16] = {15, 14, 13, 7, 6, 5};                                     // 0
  ar[4][17] = {16, 14, 12, 11, 10, 9, 8, 7, 6, 1};                       // 1
  ar[4][18] = {18, 14, 13, 12, 11, 9, 6, 5, 4, 3, 2, 1};                 // 13
  ar[4][19] = {17, 16, 15, 14, 12, 11, 9, 6, 1};                         // 0
  ar[4][20] = {18, 17, 16, 14, 13, 12, 10, 9, 7, 5};                     // 0
  ar[4][21] = {19, 18, 17, 15, 14, 12, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1};   // 9
  ar[4][22] = {20, 18, 17, 16, 15, 14, 13, 12, 10, 9, 8, 7, 4, 2};       // 1
  ar[4][23] = {21, 20, 18, 17, 16, 15, 13, 12, 9, 5};                    // 0
  ar[4][24] = {22, 20, 19, 18, 17, 16, 14, 13, 11, 10, 9, 8, 5};         // 0
  ar[4][25] = {22, 21, 20, 19, 18, 17, 16, 14, 13, 12, 10, 8, 6, 5, 1};  // 1
  ar[4][26] = {25, 23, 20, 19, 18, 17, 15, 14, 13,
               11, 10, 9,  8,  7,  5,  3,  2,  1};                          // 5
  ar[4][27] = {24, 23, 22, 21, 20, 19, 17, 16, 15, 14, 6, 5, 4, 3};         // 0
  ar[4][28] = {25, 24, 23, 22, 21, 19, 18, 17, 16, 14, 10, 9, 8, 7, 6, 4};  // 0
  ar[4][29] = {29, 25, 23, 22, 21, 19, 18, 17, 14, 13,
               11, 10, 9,  8,  7,  6,  5,  3,  2,  1};  // 5
  ar[4][30] = {27, 26, 24, 23, 22, 21, 20, 19,
               18, 17, 16, 14, 12, 8,  5,  1};  // 1
  ar[4][31] = {28, 26, 25, 24, 23, 22, 21, 20, 19, 18,
               16, 15, 14, 12, 11, 10, 5,  4,  2,  1};  // 0
  ar[4][32] = {28, 27, 26, 25, 24, 23, 22, 21, 20,
               19, 18, 17, 15, 13, 12, 10, 4};  // 0
  ar[4][33] = {29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 18,
               17, 16, 14, 10, 9,  8,  6,  4,  2,  1};  // 1
  ar[4][34] = {31, 29, 28, 27, 26, 25, 23, 22, 21, 19, 18, 17,
               16, 15, 14, 13, 12, 11, 9,  8,  7,  5,  3,  1};  // 1
  ar[4][35] = {31, 30, 29, 28, 27, 26, 24, 23, 22, 21, 20,
               19, 18, 16, 14, 13, 11, 8,  7,  6,  2};  // 0
  ar[4][36] = {32, 31, 30, 29, 27, 26, 25, 24, 23, 22, 21,
               20, 19, 18, 16, 15, 14, 10, 8,  6,  4,  1};  // 0
  ar[4][37] = {35, 31, 30, 29, 28, 27, 26, 25, 24, 23, 21, 20, 19, 18,
               17, 16, 15, 13, 12, 11, 9,  7,  6,  5,  4,  3,  2,  1};  // 1
  ar[4][38] = {34, 33, 32, 30, 29, 28, 27, 26, 25, 24, 22, 21,
               20, 19, 18, 17, 16, 14, 12, 9,  6,  4,  1};  // 1
  ar[4][39] = {35, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24,
               23, 22, 20, 19, 18, 17, 16, 14, 10, 7};  // 0
  ar[4][40] = {35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25,
               24, 23, 22, 21, 20, 18, 14, 13, 10, 7};  // 0
  ar[4][41] = {36, 35, 34, 33, 32, 31, 30, 29, 28, 26, 25, 24, 23,
               22, 21, 20, 19, 18, 17, 16, 13, 12, 10, 8,  6,  2};  // 1
  ar[4][42] = {37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 25, 23, 22, 21, 20,
               19, 17, 15, 14, 13, 12, 11, 10, 9,  7,  6,  5,  4,  3,  2};  // 1
  ar[4][43] = {38, 37, 36, 35, 34, 33, 31, 30, 29, 28, 27, 26, 25,
               24, 23, 22, 21, 20, 18, 17, 16, 10, 9,  6,  4};  // 0
  ar[4][44] = {39, 38, 37, 36, 34, 33, 32, 31, 30, 29, 28, 27, 26,
               25, 24, 23, 22, 21, 19, 18, 17, 16, 14, 12, 6};  // 0
  ar[4][45] = {40, 39, 38, 37, 35, 34, 33, 32, 31, 30, 29,
               28, 27, 26, 25, 23, 21, 20, 19, 18, 17, 16,
               15, 13, 12, 11, 10, 9,  7,  6,  5,  4,  3};  // 1
  ar[4][46] = {41, 40, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27,
               26, 25, 24, 23, 21, 20, 18, 16, 14, 12, 8,  6,  3,  2};  // 1
  ar[4][47] = {41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27,
               26, 25, 24, 23, 21, 20, 19, 18, 16, 14, 12, 6,  4,  2};  // 0
  ar[4][48] = {42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29,
               28, 26, 25, 24, 23, 22, 20, 19, 18, 17, 16, 10, 6,  3};  // 0
  ar[4][49] = {43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 30, 29, 28,
               27, 26, 25, 24, 23, 22, 20, 19, 15, 14, 12, 10, 6,  2};  // 1
  ar[4][50] = {44, 43, 42, 41, 40, 39, 38, 37, 35, 34, 33, 32, 31,
               30, 29, 28, 27, 26, 25, 23, 22, 21, 20, 19, 18, 17,
               16, 15, 14, 12, 11, 9,  8,  6,  5,  4,  3,  2,  1};  // 1
  ar[4][51] = {45, 44, 43, 42, 41, 40, 39, 37, 36, 35, 34, 33, 32, 31, 30,
               29, 28, 27, 26, 25, 23, 22, 21, 20, 18, 16, 14, 4,  2};  // 0
  ar[4][52] = {46, 45, 44, 43, 42, 40, 39, 38, 37, 36, 35,
               34, 33, 32, 31, 30, 29, 28, 26, 25, 24, 23,
               22, 21, 20, 18, 17, 16, 14, 12, 11, 2};  // 0
  ar[4][53] = {47, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33,
               32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19,
               18, 17, 16, 15, 13, 12, 11, 10, 8,  5,  2,  1};  // 1
  ar[4][54] = {48, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36,
               35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24,
               23, 22, 18, 16, 12, 10, 9,  8,  6,  4,  2};  // 1
  ar[4][55] = {48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37,
               36, 35, 34, 33, 32, 31, 30, 29, 28, 26, 25, 24,
               23, 22, 20, 18, 16, 15, 14, 12, 4,  1};  // 0
  ar[4][56] = {49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34,
               32, 31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 19, 14, 8};  // 0
  ar[4][57] = {50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38,
               36, 35, 34, 33, 32, 31, 30, 29, 28, 26, 25, 24, 23,
               22, 20, 18, 17, 16, 14, 12, 10, 9,  8,  6,  2};  // 1
  ar[4][58] = {51, 50, 49, 48, 47, 46, 45, 43, 42, 41, 40, 39, 38, 37, 36,
               35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21,
               20, 18, 17, 16, 15, 14, 11, 10, 8,  7,  6,  5,  3};  // 1
  ar[4][59] = {52, 51, 50, 49, 48, 47, 45, 44, 43, 42, 41, 40,
               39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28,
               27, 26, 25, 24, 22, 20, 19, 18, 16, 12, 8,  6};  // 0
  ar[4][60] = {53, 52, 51, 50, 48, 47, 46, 45, 44, 43, 42, 41, 40,
               39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27,
               26, 25, 24, 22, 20, 19, 14, 12, 10, 8,  4};  // 0
  ar[4][61] = {54, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42,
               41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30,
               29, 28, 27, 26, 25, 24, 23, 21, 20, 19, 18, 17,
               16, 14, 13, 12, 11, 10, 9,  8,  6,  5,  2,  1};  // 1

  ar[3][1] = {};                                                  // 1
  ar[3][2] = {1};                                                 // 7
  ar[3][3] = {2, 1};                                              // 18
  ar[3][4] = {3, 2, 1};                                           // 28
  ar[3][5] = {4, 3, 2, 1};                                        // 25
  ar[3][6] = {5, 4, 3, 1};                                        // 7
  ar[3][7] = {7, 3, 2, 1};                                        // 26
  ar[3][8] = {8, 5, 2, 1};                                        // 4
  ar[3][9] = {9, 6, 4, 1};                                        // 5
  ar[3][10] = {9, 7, 6, 5, 4, 3, 2};                              // 1
  ar[3][11] = {10, 9, 7, 4, 3, 2, 1};                             // 12
  ar[3][12] = {11, 10, 7, 6, 5, 3};                               // 0
  ar[3][13] = {11, 10, 9, 8, 7, 5, 4, 3, 2, 1};                   // 1
  ar[3][14] = {13, 12, 10, 7, 6, 3, 1};                           // 1
  ar[3][15] = {13, 12, 11, 10, 8, 6, 5, 4, 3};                    // 0
  ar[3][16] = {15, 14, 12, 9, 8, 5, 3, 2};                        // 0
  ar[3][17] = {16, 13, 12, 11, 10, 9, 7, 6, 4};                   // 1
  ar[3][18] = {18, 16, 13, 11, 9, 7, 4, 3, 1};                    // 1
  ar[3][19] = {17, 16, 15, 14, 11, 9, 8, 6, 5, 2, 1};             // 0
  ar[3][20] = {17, 16, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 4, 2};  // 0
  ar[3][21] = {19, 18, 16, 15, 13, 11, 10, 9, 8, 7, 6, 5, 4, 1};  // 1
  ar[3][22] = {19, 18, 17, 15, 14, 13, 12, 11, 10,
               9,  8,  7,  6,  5,  4,  3,  2,  1};                         // 1
  ar[3][23] = {20, 19, 18, 16, 15, 14, 13, 12, 11, 9, 8, 7, 6, 5, 1};      // 0
  ar[3][24] = {21, 20, 19, 17, 16, 15, 14, 13, 11, 10, 8, 7, 6, 5, 3, 1};  // 0
  ar[3][25] = {22, 21, 19, 18, 17, 16, 15, 14, 12, 11,
               9,  8,  7,  6,  5,  4,  3,  2,  1};  // 1
  ar[3][26] = {22, 21, 20, 19, 18, 17, 16, 15, 14,
               13, 12, 10, 8,  7,  4,  3,  1};  // 1
  ar[3][27] = {23, 22, 21, 20, 19, 18, 17, 15, 14, 13,
               12, 11, 10, 9,  7,  6,  4,  3,  2};  // 0
  ar[3][28] = {24, 23, 22, 21, 20, 19, 18, 17, 15,
               14, 12, 11, 9,  8,  7,  5,  3};                              // 0
  ar[3][29] = {25, 24, 23, 22, 21, 19, 18, 17, 16, 15, 14, 13, 12, 10, 7};  // 1
  ar[3][30] = {26, 25, 24, 22, 21, 20, 19, 18, 17,
               16, 15, 14, 13, 12, 10, 7,  4,  3};  // 1
  ar[3][31] = {27, 26, 25, 24, 22, 21, 20, 19, 18, 16,
               15, 14, 13, 12, 10, 7,  5,  4,  3,  1};  // 0
  ar[3][32] = {27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
               16, 15, 13, 12, 11, 10, 9,  8,  3,  2,  1};  // 0
  ar[3][33] = {28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18,
               16, 15, 14, 13, 12, 10, 8,  6,  4,  1};  // 1
  ar[3][34] = {29, 28, 27, 26, 25, 24, 23, 22, 20, 19, 18, 17,
               16, 15, 14, 12, 11, 10, 9,  7,  5,  4,  2,  1};  // 1
  ar[3][35] = {30, 29, 28, 27, 26, 24, 23, 22, 21, 20, 19, 18,
               17, 16, 15, 14, 13, 12, 10, 9,  7,  5,  2,  1};  // 0
  ar[3][36] = {31, 30, 29, 27, 26, 25, 24, 23, 22, 21, 20, 19,
               18, 17, 16, 15, 14, 13, 12, 10, 9,  6,  5};  // 0
  ar[3][37] = {32, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19,
               18, 17, 16, 15, 14, 13, 11, 10, 9,  8,  7,  6,  4};  // 1
  ar[3][38] = {33, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21,
               20, 19, 18, 16, 15, 14, 13, 12, 10, 8,  7,  1};  // 1
  ar[3][39] = {33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 20, 19,
               18, 17, 16, 15, 14, 13, 12, 11, 10, 9,  3,  2,  1};  // 0
  ar[3][40] = {34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 22, 21,
               20, 19, 18, 17, 16, 14, 13, 12, 10, 9,  7,  1};  // 0
  ar[3][41] = {35, 34, 33, 32, 31, 30, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19,
               18, 17, 16, 15, 14, 13, 12, 10, 9,  7,  6,  5,  4,  3,  1};  // 1
  ar[3][42] = {36, 35, 34, 33, 32, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21,
               20, 19, 18, 17, 16, 15, 14, 11, 8,  6,  5,  3,  2,  1};  // 1
  ar[3][43] = {37, 36, 35, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22,
               21, 20, 19, 18, 17, 15, 14, 13, 11, 9,  8,  5,  3,  2,  1};  // 0
  ar[3][44] = {37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23,
               22, 21, 20, 19, 18, 17, 16, 14, 13, 12, 11, 10, 9,  8};  // 0

  ar[2][1] = {};                                                          // 1
  ar[2][2] = {1};                                                         // 3
  ar[2][3] = {2, 1};                                                      // 4
  ar[2][4] = {3, 2, 1};                                                   // 2
  ar[2][5] = {4, 3, 1};                                                   // 3
  ar[2][6] = {5, 4, 2};                                                   // 1
  ar[2][7] = {6, 5, 3};                                                   // 0
  ar[2][8] = {7, 6, 4, 1};                                                // 0
  ar[2][9] = {8, 6, 5, 4, 1};                                             // 1
  ar[2][10] = {9, 7, 6, 4, 3, 1};                                         // 1
  ar[2][11] = {10, 8, 7, 6, 2};                                           // 0
  ar[2][12] = {11, 8, 7, 6, 5, 4, 3, 2, 1};                               // 0
  ar[2][13] = {11, 10, 8, 7, 6, 5, 3, 2, 1};                              // 1
  ar[2][14] = {12, 11, 10, 8, 6, 5, 4, 1};                                // 1
  ar[2][15] = {12, 11, 10, 9, 8, 7, 6, 4, 3};                             // 0
  ar[2][16] = {13, 12, 11, 10, 9, 8, 7, 4, 2};                            // 0
  ar[2][17] = {14, 13, 12, 11, 10, 8, 7, 6, 3, 2};                        // 1
  ar[2][18] = {15, 14, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2};                  // 1
  ar[2][19] = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3};              // 0
  ar[2][20] = {16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 4, 3, 2, 1};          // 0
  ar[2][21] = {17, 16, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 4, 2, 1};       // 1
  ar[2][22] = {18, 17, 16, 15, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2, 1};   // 1
  ar[2][23] = {19, 18, 17, 15, 14, 13, 12, 11, 10, 9, 8, 7, 5, 3, 2, 1};  // 0
  ar[2][24] = {19, 18, 17, 16, 15, 14, 13, 12, 11,
               10, 9,  8,  7,  6,  5,  3,  1};  // 0
  ar[2][25] = {21, 19, 18, 17, 16, 15, 14, 13, 11,
               10, 9,  8,  7,  6,  5,  4,  3};  // 1
  ar[2][26] = {21, 20, 19, 18, 17, 16, 15, 14, 12,
               11, 10, 9,  8,  7,  6,  3,  2};  // 1
  ar[2][27] = {22, 21, 20, 19, 18, 16, 15, 14, 13,
               12, 11, 10, 9,  8,  7,  5,  4,  3};  // 0
  ar[2][28] = {23, 22, 20, 19, 18, 17, 16, 15, 14, 13,
               12, 11, 10, 9,  8,  7,  6,  4,  3,  2};  // 0
  ar[2][29] = {24, 22, 21, 20, 19, 18, 17, 16, 15, 14,
               13, 12, 11, 10, 8,  7,  6,  5,  4,  1};  // 1
  ar[2][30] = {24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,
               12, 11, 10, 9,  8,  7,  6,  5,  4,  3,  1};  // 1
  ar[2][31] = {25, 24, 23, 22, 21, 20, 19, 18, 17, 15, 14,
               13, 12, 11, 10, 9,  8,  7,  4,  3,  2,  1};  // 0
  ar[2][32] = {26, 25, 24, 23, 22, 20, 19, 18, 17, 16, 15, 14,
               13, 12, 11, 10, 9,  8,  7,  5,  4,  3,  1};  // 0
  ar[2][33] = {27, 26, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15,
               14, 13, 12, 11, 10, 9,  8,  7,  5,  4,  3};  // 1
  ar[2][34] = {27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
               16, 15, 14, 13, 12, 11, 10, 9,  8,  6,  4};  // 1
  ar[2][35] = {28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16,
               14, 13, 12, 11, 10, 9,  8,  7,  6,  4,  2,  1};  // 0
  ar[2][36] = {29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 16,
               15, 14, 13, 12, 11, 10, 9,  8,  7,  5,  3,  2,  1};  // 0
  ar[2][37] = {30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 19, 18,
               17, 16, 15, 14, 13, 12, 11, 9,  8,  7,  6,  4};  // 1
  ar[2][38] = {31, 30, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
               16, 15, 14, 13, 12, 11, 10, 9,  8,  6,  5,  3,  2};  // 1
  ar[2][39] = {31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17,
               16, 15, 14, 13, 12, 10, 9,  8,  7,  6,  4,  3,  2,  1};  // 0
  ar[2][40] = {32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 18, 17,
               16, 15, 14, 13, 12, 11, 10, 9,  8,  7,  6,  5,  4,  2,  1};  // 0
  ar[2][41] = {33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 22, 21, 20, 19, 18,
               17, 16, 15, 14, 13, 12, 11, 10, 8,  7,  6,  5,  4,  2,  1};  // 1
  ar[2][42] = {34, 33, 32, 31, 30, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18,
               17, 16, 15, 14, 13, 12, 11, 10, 9,  8,  7,  5,  3,  2,  1};  // 1
  ar[2][43] = {35, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24,
               23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13,
               12, 11, 10, 9,  8,  7,  5,  4,  3,  2};  // 0
  ar[2][44] = {35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24,
               23, 22, 21, 20, 19, 18, 17, 16, 14, 13, 12, 11,
               10, 9,  8,  7,  6,  5,  4,  3,  2,  1};  // 0
  ar[2][45] = {36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25,
               24, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12,
               11, 10, 9,  8,  7,  6,  4,  3,  2,  1};  // 1
  ar[2][46] = {37, 36, 35, 34, 33, 32, 31, 30, 29, 27, 26, 25,
               24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13,
               12, 11, 10, 9,  8,  7,  5,  4,  3,  2,  1};  // 1

  ar[1][1] = {};                                                         // 1
  ar[1][2] = {1};                                                        // 1
  ar[1][3] = {2, 1};                                                     // 0
  ar[1][4] = {3, 2};                                                     // 0
  ar[1][5] = {4, 2, 1};                                                  // 1
  ar[1][6] = {4, 3, 2, 1};                                               // 1
  ar[1][7] = {5, 4, 3, 2};                                               // 0
  ar[1][8] = {6, 5, 4, 2, 1};                                            // 0
  ar[1][9] = {7, 5, 4, 3, 2, 1};                                         // 1
  ar[1][10] = {7, 6, 5, 4, 3, 2};                                        // 1
  ar[1][11] = {8, 7, 6, 5, 4, 2, 1};                                     // 0
  ar[1][12] = {9, 8, 7, 5, 4, 3, 2, 1};                                  // 0
  ar[1][13] = {9, 8, 7, 6, 5, 4, 3, 2, 1};                               // 1
  ar[1][14] = {10, 9, 8, 7, 6, 5, 4, 2, 1};                              // 1
  ar[1][15] = {11, 10, 9, 8, 7, 5, 4, 3, 2, 1};                          // 0
  ar[1][16] = {12, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1};                       // 0
  ar[1][17] = {12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1};                      // 1
  ar[1][18] = {13, 12, 11, 10, 9, 8, 7, 5, 4, 3, 2, 1};                  // 1
  ar[1][19] = {14, 13, 12, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1};               // 0
  ar[1][20] = {14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};           // 0
  ar[1][21] = {15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 4, 3, 2, 1};          // 1
  ar[1][22] = {16, 15, 14, 13, 12, 11, 9, 8, 7, 6, 5, 4, 3, 2, 1};       // 1
  ar[1][23] = {17, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};   // 0
  ar[1][24] = {17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1};  // 0
  ar[1][25] = {18, 17, 16, 15, 14, 13, 12, 11, 10,
               8,  7,  6,  5,  4,  3,  2,  1};  // 1
  ar[1][26] = {19, 18, 17, 16, 14, 13, 12, 11, 10,
               9,  8,  7,  6,  5,  4,  3,  2,  1};  // 1
  ar[1][27] = {19, 18, 17, 16, 15, 14, 13, 12, 11,
               10, 9,  8,  7,  6,  5,  4,  3,  2};  // 0
  ar[1][28] = {20, 19, 18, 17, 16, 15, 14, 13, 12, 11,
               10, 9,  8,  6,  5,  4,  3,  2,  1};  // 0
  ar[1][29] = {21, 20, 19, 18, 17, 16, 15, 13, 12, 11,
               10, 9,  8,  7,  6,  5,  4,  3,  2,  1};  // 1

  cin >> k;
  int t;
  cin >> t;
  for (int tc = 1; tc <= t; tc++) {
//    cout << "Case #" << tc << ": ";
#ifdef UHATEME
    //    n = tc;
    //    cout << n << endl;
    SolveTestCaseDriver(solve_type, SolveBruteTestCase, SolveTestCase,
                        TEST_CASE, tc);
#else
    SolveTestCase();
#endif
    cout << endl;
  }
}

int main() {
  UseFastIO(true);
#ifdef UHATEME
  SetInputType(CURRENT_INPUT_TYPE, GenerateInput, Solve);
#endif
  Solve(MAIN);
}
